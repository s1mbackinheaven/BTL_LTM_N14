package com.oop.game.server.core;

import com.oop.game.server.enums.GameEndReason;
import com.oop.game.server.enums.PowerUp;

import java.util.*;

/**
 * Qu·∫£n l√Ω 1 tr·∫≠n ƒë·∫•u gi·ªØa 2 ng∆∞·ªùi ch∆°i
 * Stateful - l∆∞u tr·∫°ng th√°i tr·∫≠n ƒë·∫•u, x·ª≠ l√Ω lu√¢n phi√™n, ƒëi·ªÅu ki·ªán th·∫Øng
 */
public class GameSession {
    private Player player1, player2;
    private Player currentPlayer;
    private ColorBoard colorBoard;
    private boolean gameEnded;
    private Player winner;
    private GameEndReason endReason;

    // Ph·ª• tr·ª£ ch·ªù k√≠ch ho·∫°t (v√≠ d·ª•: HALF_OPPONENT_NEXT)
    private Map<Player, List<PowerUp>> pendingPowerUps;

    public GameSession(Player challenger, Player challenged) {
        this.player1 = challenger;
        this.player2 = challenged;
        this.currentPlayer = challenger; // Ng∆∞·ªùi th√°ch ƒë·∫•u n√©m tr∆∞·ªõc
        this.colorBoard = new ColorBoard();
        this.gameEnded = false;
        this.pendingPowerUps = new HashMap<>();

        initializeGame();
    }

    /**
     * Kh·ªüi t·∫°o tr·∫≠n ƒë·∫•u: reset ƒëi·ªÉm, ph√¢n ph·ª• tr·ª£
     */
    private void initializeGame() {
        // Reset tr·∫°ng th√°i 2 ng∆∞·ªùi ch∆°i
        player1.resetForNewGame();
        player2.resetForNewGame();
        player1.setBusy(true);
        player2.setBusy(true);
        player1.setMyTurn(true); // Ng∆∞·ªùi th√°ch ƒë·∫•u n√©m tr∆∞·ªõc
        player2.setMyTurn(false);

        // Random 3 ph·ª• tr·ª£ cho m·ªói ng∆∞·ªùi
        // player1.setAvailablePowerUps(Arrays.asList(GameEngine.generateRandomPowerUps()));
        // player2.setAvailablePowerUps(Arrays.asList(GameEngine.generateRandomPowerUps()));
        player1.setAvailablePowerUps(new ArrayList<>(Arrays.asList(GameEngine.generateRandomPowerUps())));
        player2.setAvailablePowerUps(new ArrayList<>(Arrays.asList(GameEngine.generateRandomPowerUps())));

        // Kh·ªüi t·∫°o pending power-ups
        pendingPowerUps.put(player1, new ArrayList<>());
        pendingPowerUps.put(player2, new ArrayList<>());
    }

    /**
     * X·ª≠ l√Ω 1 l∆∞·ª£t n√©m c·ªßa ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
     *
     * @param playerX     t·ªça ƒë·ªô X nh·∫≠p v√†o
     * @param playerY     t·ªça ƒë·ªô Y nh·∫≠p v√†o
     * @param usedPowerUp ph·ª• tr·ª£ s·ª≠ d·ª•ng (c√≥ th·ªÉ null)
     * @return k·∫øt qu·∫£ l∆∞·ª£t n√©m
     */
    public GameEngine.ThrowResult processPlayerThrow(int playerX, int playerY, PowerUp usedPowerUp) {
        if (gameEnded) {
            throw new IllegalStateException("Game ƒë√£ k·∫øt th√∫c!");
        }

        // Random l·ª±c ƒë·∫©y
        int force = GameEngine.generateRandomForce();

        // Chu·∫©n b·ªã ph·ª• tr·ª£ k√≠ch ho·∫°t
        PowerUp[] activePowerUps = prepareActivePowerUps(usedPowerUp);

        // X·ª≠ l√Ω l∆∞·ª£t n√©m
        boolean isOpponentTurn = false; // Lu√¥n false v√¨ ƒëang x·ª≠ l√Ω l∆∞·ª£t c·ªßa current player
        GameEngine.ThrowResult result = GameEngine.processThrow(
                playerX, playerY, force, colorBoard, activePowerUps, isOpponentTurn);

        // C·∫≠p nh·∫≠t ƒëi·ªÉm
        currentPlayer.setCurrentScore(currentPlayer.getCurrentScore() + result.finalScore);

        // X·ª≠ l√Ω ph·ª• tr·ª£ ·∫£nh h∆∞·ªüng b·∫£ng m√†u
        handleBoardEffects(usedPowerUp, result);

        // X·ª≠ l√Ω ph·ª• tr·ª£ ·∫£nh h∆∞·ªüng ƒë·ªëi th·ªß (pending)
        handleOpponentEffects(usedPowerUp);

        // Remove ph·ª• tr·ª£ ƒë√£ s·ª≠ d·ª•ng
        if (usedPowerUp != null) {
            currentPlayer.getAvailablePowerUps().remove(usedPowerUp);
        }

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng
        checkWinCondition();

        // Chuy·ªÉn l∆∞·ª£t (n·∫øu kh√¥ng c√≥ extra turn)
        if (!result.hasExtraTurn && !gameEnded) {
            switchTurn();
        }

        return result;
    }

    /**
     * Chu·∫©n b·ªã danh s√°ch ph·ª• tr·ª£ k√≠ch ho·∫°t cho l∆∞·ª£t n√†y
     */
    private PowerUp[] prepareActivePowerUps(PowerUp usedPowerUp) {
        List<PowerUp> active = new ArrayList<>();

        // Th√™m ph·ª• tr·ª£ ng∆∞·ªùi ch∆°i s·ª≠ d·ª•ng
        if (usedPowerUp != null) {
            active.add(usedPowerUp);
        }

        // Th√™m ph·ª• tr·ª£ pending t·ª´ ƒë·ªëi th·ªß (v√≠ d·ª•: HALF_OPPONENT_NEXT)
        Player opponent = getOpponent();
        List<PowerUp> pending = pendingPowerUps.get(opponent);
        active.addAll(pending);
        pending.clear(); // Clear sau khi √°p d·ª•ng

        return active.toArray(new PowerUp[0]);
    }

    /**
     * X·ª≠ l√Ω ph·ª• tr·ª£ ·∫£nh h∆∞·ªüng b·∫£ng m√†u
     */
    private void handleBoardEffects(PowerUp usedPowerUp, GameEngine.ThrowResult result) {
        if (usedPowerUp == null)
            return;

        switch (usedPowerUp) {
            case REVEAL_COLORS:
                colorBoard.revealOnlyThreeColors();
                break;
            case SWAP_OPPONENT_COLORS:
                colorBoard.swapRandomColors();
                break;
        }

        // N·∫øu tr√∫ng m√†u, cho ph√©p ƒë·ªïi m√†u (theo lu·∫≠t game)
        if (result.hitColor != null) {
            // TODO: Implement color swapping choice for player
            // Hi·ªán t·∫°i t·ª± ƒë·ªông random ƒë·ªÉ test
            colorBoard.swapRandomColors();
        }
    }

    /**
     * X·ª≠ l√Ω ph·ª• tr·ª£ ·∫£nh h∆∞·ªüng ƒë·ªëi th·ªß (l∆∞u v√†o pending)
     */
    private void handleOpponentEffects(PowerUp usedPowerUp) {
        if (usedPowerUp == PowerUp.HALF_OPPONENT_NEXT) {
            Player opponent = getOpponent();
            pendingPowerUps.get(opponent).add(PowerUp.HALF_OPPONENT_NEXT);
        }
    }

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng (16 ƒëi·ªÉm)
     */
    private void checkWinCondition() {
        if (currentPlayer.getCurrentScore() >= 16) {
            endGame(currentPlayer, GameEndReason.REACH_TARGET_SCORE);
        }
    }

    /**
     * Chuy·ªÉn l∆∞·ª£t ch∆°i
     */
    private void switchTurn() {
        currentPlayer.setMyTurn(false);
        currentPlayer = (currentPlayer == player1) ? player2 : player1;
        currentPlayer.setMyTurn(true);
    }

    /**
     * K·∫øt th√∫c game v·ªõi l√Ω do
     */
    public void endGame(Player winner, GameEndReason reason) {
        this.gameEnded = true;
        this.winner = winner;
        this.endReason = reason;

        // C·∫≠p nh·∫≠t ELO
        updateEloRatings(reason);

        // Reset tr·∫°ng th√°i busy
        player1.setBusy(false);
        player2.setBusy(false);

        // Log k·∫øt qu·∫£
        Player loser = (winner == player1) ? player2 : player1;
        System.out.println("üèÜ GAME K·∫æT TH√öC:");
        System.out.println("   Winner: " + winner.getUsername() + " (" + winner.getCurrentScore() + " ƒëi·ªÉm)");
        System.out.println("   Loser: " + loser.getUsername() + " (" + loser.getCurrentScore() + " ƒëi·ªÉm)");
        System.out.println("   Reason: " + reason);
        System.out.println(
                "   ELO Change: Winner +" + (reason == GameEndReason.OPPONENT_LEFT ? 51 : 101) + ", Loser -36");

        // TODO: G·ª≠i th√¥ng b√°o ƒë·∫øn client (c·∫ßn implement trong ClientHandler)
        // TODO: L∆∞u k·∫øt qu·∫£ v√†o database (c·∫ßn implement v·ªõi MatchDAO)
    }

    /**
     * C·∫≠p nh·∫≠t ELO theo k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u
     */
    private void updateEloRatings(GameEndReason reason) {
        Player loser = (winner == player1) ? player2 : player1;

        switch (reason) {
            case REACH_TARGET_SCORE:
                winner.updateElo(101);
                loser.updateElo(-36);
                break;
            case OPPONENT_LEFT:
                winner.updateElo(51);
                loser.updateElo(-36);
                break;
        }
    }

    /**
     * X·ª≠ l√Ω ng∆∞·ªùi ch∆°i r·ªùi tr·∫≠n
     */
    public void playerLeft(Player player) {
        Player remaining = (player == player1) ? player2 : player1;
        endGame(remaining, GameEndReason.OPPONENT_LEFT);
    }

    /**
     * L·∫•y ƒë·ªëi th·ªß c·ªßa current player
     */
    private Player getOpponent() {
        return (currentPlayer == player1) ? player2 : player1;
    }

    // Getters
    public Player getPlayer1() {
        return player1;
    }

    public Player getPlayer2() {
        return player2;
    }

    public Player getCurrentPlayer() {
        return currentPlayer;
    }

    public ColorBoard getColorBoard() {
        return colorBoard;
    }

    public boolean isGameEnded() {
        return gameEnded;
    }

    public Player getWinner() {
        return winner;
    }

    public GameEndReason getEndReason() {
        return endReason;
    }

}