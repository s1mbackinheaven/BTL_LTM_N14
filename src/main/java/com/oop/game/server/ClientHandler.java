package com.oop.game.server;

import com.oop.game.server.core.GameSession;
import com.oop.game.server.core.Player;
import com.oop.game.server.core.GameEngine;
import com.oop.game.server.DAO.UserDAO;
import com.oop.game.server.managers.ClientManager;
import com.oop.game.server.models.User;
import com.oop.game.server.protocol.ErrorMessage;
import com.oop.game.server.protocol.request.LoginRequest;
import com.oop.game.server.protocol.Message;
import com.oop.game.server.protocol.request.InviteRequest;
import com.oop.game.server.protocol.request.MoveRequest;
import com.oop.game.server.protocol.request.PlayerListRequest;
import com.oop.game.server.protocol.response.LoginResponse;
import com.oop.game.server.protocol.response.PlayerListResponse;
import com.oop.game.server.protocol.response.InviteResponse;
import com.oop.game.server.managers.GameSessionManager;
import com.oop.game.server.managers.ClientConnectionManager;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class ClientHandler implements Runnable {
    private final Socket socket;
    private final ClientManager mClient;
    private final GameSessionManager gameSessionManager;
    private final ClientConnectionManager connectionManager;
    private Player currentPlayer; // Ng∆∞·ªùi ch∆°i hi·ªán t·∫°i trong session n√†y

    public ClientHandler(Socket socket) {
        this.socket = socket;
        this.mClient = ClientManager.getInstance();
        this.gameSessionManager = GameSessionManager.getInstance();
        this.connectionManager = ClientConnectionManager.getInstance();
    }

    @Override
    public void run() {
        try (ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
             ObjectInputStream input = new ObjectInputStream(socket.getInputStream())) {

            while (true) {
                try {
                    Object msg = input.readObject();
                    handlerMes(msg, output);
                } catch (ClassNotFoundException e) {
                    System.err.println("‚ùå Class not found: " + e.getMessage());
                } catch (IOException e) {
                    System.err.println("‚ö†Ô∏è Client " + socket + " ƒë√£ ng·∫Øt k·∫øt n·ªëi");
                    // Cleanup khi client disconnect
                    cleanupOnDisconnect();
                    break;
                }
            }

        } catch (IOException e) {
            System.err.println("‚ùå L·ªói IO khi t·∫°o stream cho client " + socket);
        } finally {
            // Cleanup khi k·∫øt th√∫c thread
            cleanupOnDisconnect();
            try {
                socket.close();
            } catch (IOException e) {
                System.err.println("‚ùå Kh√¥ng th·ªÉ ƒë√≥ng socket: " + e.getMessage());
            }
        }
    }

    private void handlerMes(Object obj, ObjectOutputStream objOP) throws IOException {
        if (obj instanceof LoginRequest) {
            // ƒëƒÉng nh·∫≠p
            handlerLoginReq((LoginRequest) obj, objOP);
        } else if (obj instanceof MoveRequest) {
            // n√©m phi ti√™u
            handlerMoveReq((MoveRequest) obj, objOP);
        } else if (obj instanceof InviteRequest) {
            // l·ªùi m·ªùi th√°ch ƒë·∫•u
            handlerInviteReq((InviteRequest) obj, objOP);
        } else if (obj instanceof InviteResponse) {
            handlerInviteResponse((InviteResponse) obj, objOP);
        } else if (obj instanceof PlayerListRequest) {
            // danh s√°ch ng∆∞·ªùi ch∆°i online
            handlerPlayerListReq((PlayerListRequest) obj, objOP);
        } else if (obj instanceof InviteResponse) {
            // ph·∫£n h·ªìi l·ªùi m·ªùi th√°ch ƒë·∫•u
            handlerInviteResponse((InviteResponse) obj, objOP);
        } else {
            System.err.println("‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c message kh√¥ng x√°c ƒë·ªãnh t·ª´ client: " + obj);
        }
    }

    private void handlerLoginReq(LoginRequest req, ObjectOutputStream objOP) {
        UserDAO userDAO = new UserDAO();
        String username = req.getUsername();
        String password = req.getPassword();

        if (username == null || password == null) {
            OP(new LoginResponse(false, "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin", null), objOP);
            return;
        }

        if (!userDAO.authenticateUser(username, password)) {
            OP(new LoginResponse(false, "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u", null), objOP);
            return;
        }

        User user = userDAO.getUserByUsername(username);
        Player player = new Player(user);

        if (mClient.isOnline(player)) {
            OP(new LoginResponse(false, "Ng∆∞·ªùi ch∆°i ƒëang ƒëƒÉng nh·∫≠p ·ªü n∆°i kh√°c", null), objOP);
            return;
        }

        // L∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
        this.currentPlayer = player;

        // Th√™m v√†o danh s√°ch online
        mClient.addUserOnline(player);

        // ƒêƒÉng k√Ω k·∫øt n·ªëi ƒë·ªÉ c√≥ th·ªÉ g·ª≠i message ƒë·∫øn client n√†y
        connectionManager.registerClient(player.getUsername(), objOP);

        OP(new LoginResponse(true, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", player), objOP);
    }

    private void handlerMoveReq(MoveRequest req, ObjectOutputStream objOP) {
        if (currentPlayer == null) {
            OP(new ErrorMessage("SERVER", "NOT_LOGGED_IN", "Ch∆∞a ƒëƒÉng nh·∫≠p"), objOP);
            return;
        }

        // Ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ƒëang trong tr·∫≠n ƒë·∫•u kh√¥ng
        if (!gameSessionManager.isPlayerInGame(currentPlayer.getUsername())) {
            OP(new ErrorMessage("SERVER", "NOT_IN_GAME", "Kh√¥ng ƒëang trong tr·∫≠n ƒë·∫•u"), objOP);
            return;
        }

        GameSession game = gameSessionManager.getSessionByPlayer(currentPlayer.getUsername());
        if (game == null || game.isGameEnded()) {
            OP(new ErrorMessage("SERVER", "GAME_ENDED", "Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c"), objOP);
            return;
        }

        try {
            // X·ª≠ l√Ω l∆∞·ª£t n√©m
            GameEngine.ThrowResult result = game.processPlayerThrow(
                    req.getX(),
                    req.getY(),
                    req.getUsedPowerUp());

            System.out.println("üéØ " + currentPlayer.getUsername() + " n√©m (" + req.getX() + "," + req.getY() +
                    ") -> " + result.finalScore + " ƒëi·ªÉm | T·ªïng: " + currentPlayer.getCurrentScore());

            // Game s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c trong processPlayerThrow n·∫øu ƒë·∫°t 16 ƒëi·ªÉm

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi x·ª≠ l√Ω move request: " + e.getMessage());
            OP(new ErrorMessage("SERVER", "MOVE_FAILED", "Kh√¥ng th·ªÉ th·ª±c hi·ªán n∆∞·ªõc ƒëi"), objOP);
        }
    }

    private void handlerPlayerListReq(PlayerListRequest req, ObjectOutputStream objOP) {
        // TODO: x·ª≠ l√Ω player list request
        OP(new PlayerListResponse(req.getSenderUN(), mClient.getListUserOnline()), objOP);
    }

    private void handlerInviteReq(InviteRequest req, ObjectOutputStream objOP) {
        String senderUN = req.getSenderUN();
        String targetUN = req.getTargetUsername();

        // Ki·ªÉm tra ng∆∞·ªùi g·ª≠i c√≥ ƒëang online kh√¥ng
        Player sender = mClient.getUserByName(senderUN);
        if (sender == null) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_NOT_FOUND, "Ng∆∞·ªùi g·ª≠i kh√¥ng online"), objOP);
            return;
        }

        // Ki·ªÉm tra ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi c√≥ online kh√¥ng
        Player target = mClient.getUserByName(targetUN);
        if (target == null) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_NOT_FOUND, "Ng∆∞·ªùi ch∆°i " + targetUN + " kh√¥ng online"),
                    objOP);
            return;
        }

        // Ki·ªÉm tra ng∆∞·ªùi g·ª≠i c√≥ ƒëang trong tr·∫≠n ƒë·∫•u kh√¥ng
        if (sender.isBusy()) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_BUSY, "B·∫°n ƒëang trong tr·∫≠n ƒë·∫•u"), objOP);
            return;
        }

        // Ki·ªÉm tra ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi c√≥ ƒëang trong tr·∫≠n ƒë·∫•u kh√¥ng
        if (target.isBusy()) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_BUSY, "Ng∆∞·ªùi ch∆°i " + targetUN + " ƒëang b·∫≠n"), objOP);
            return;
        }

        // Ki·ªÉm tra kh√¥ng th·ªÉ m·ªùi ch√≠nh m√¨nh
        if (senderUN.equals(targetUN)) {
            OP(new ErrorMessage("SERVER", "INVALID_INVITE", "Kh√¥ng th·ªÉ m·ªùi ch√≠nh m√¨nh"), objOP);
            return;
        }

        // G·ª≠i l·ªùi m·ªùi ƒë·∫øn ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi
        InviteRequest inviteToTarget = new InviteRequest(senderUN, targetUN);
        boolean sentSuccessfully = connectionManager.sendMessageToClient(targetUN, inviteToTarget);

        if (sentSuccessfully) {
            // G·ª≠i response x√°c nh·∫≠n cho ng∆∞·ªùi g·ª≠i
            OP(new InviteResponse(senderUN, targetUN, true), objOP);
            System.out.println("üì® " + senderUN + " ƒë√£ g·ª≠i l·ªùi m·ªùi th√°ch ƒë·∫•u ƒë·∫øn " + targetUN);
        } else {
            // N·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c, b√°o l·ªói
            OP(new ErrorMessage("SERVER", "SEND_FAILED", "Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi ƒë·∫øn " + targetUN), objOP);
        }
    }

    private void handlerInviteResponse(InviteResponse response, ObjectOutputStream objOP) {

        String responderUN = response.getSenderUN();
        String inviterUN = response.getInviterUsername();
        boolean accepted = response.isAccepted();

        // Ki·ªÉm tra ng∆∞·ªùi ph·∫£n h·ªìi c√≥ online kh√¥ng
        Player responder = mClient.getUserByName(responderUN);
        if (responder == null) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_NOT_FOUND, "Ng∆∞·ªùi ph·∫£n h·ªìi kh√¥ng online"), objOP);
            return;
        }

        // Ki·ªÉm tra ng∆∞·ªùi m·ªùi c√≥ online kh√¥ng
        Player inviter = mClient.getUserByName(inviterUN);
        if (inviter == null) {
            OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_NOT_FOUND, "Ng∆∞·ªùi m·ªùi kh√¥ng c√≤n online"), objOP);
            return;
        }

        if (accepted) {
            // Ki·ªÉm tra c·∫£ 2 ng∆∞·ªùi ch∆°i c√≥ c√≤n free kh√¥ng
            if (responder.isBusy() || inviter.isBusy()) {
                OP(new ErrorMessage("SERVER", ErrorMessage.PLAYER_BUSY, "M·ªôt trong hai ng∆∞·ªùi ch∆°i ƒë√£ b·∫≠n"), objOP);
                return;
            }

            // T·∫°o tr·∫≠n ƒë·∫•u m·ªõi
            try {

                // G·ª≠i response x√°c nh·∫≠n cho ng∆∞·ªùi ph·∫£n h·ªìi
                OP(new InviteResponse(responderUN, inviterUN, true), objOP);

                // kh·ªüi t·∫°o game ƒë·∫•u
                String sessionId = gameSessionManager.createGameSession(inviter, responder);

                System.out.println("üéÆ Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu gi·ªØa " + inviterUN + " v√† " + responderUN + " (Session: "
                        + sessionId + ")");

            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi t·∫°o tr·∫≠n ƒë·∫•u: " + e.getMessage());
                OP(new ErrorMessage("SERVER", "GAME_CREATION_FAILED", "Kh√¥ng th·ªÉ t·∫°o tr·∫≠n ƒë·∫•u"), objOP);
            }
        } else {
            // T·ª´ ch·ªëi l·ªùi m·ªùi
            System.out.println("‚ùå " + responderUN + " ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi t·ª´ " + inviterUN);
            OP(new InviteResponse(responderUN, inviterUN, false), objOP);

            // Th√¥ng b√°o cho ng∆∞·ªùi m·ªùi
            connectionManager.sendMessageToClient(inviterUN,
                    new InviteResponse(inviterUN, responderUN, false));
        }
    }

    /**
     * Cleanup khi client disconnect
     */
    private void cleanupOnDisconnect() {
        if (currentPlayer != null) {
            // N·∫øu ƒëang trong tr·∫≠n ƒë·∫•u, k·∫øt th√∫c tr·∫≠n ƒë·∫•u
            if (gameSessionManager.isPlayerInGame(currentPlayer.getUsername())) {
                GameSession game = gameSessionManager.getSessionByPlayer(currentPlayer.getUsername());

                if (game != null && !game.isGameEnded()) {
                    // X·ª≠ l√Ω ng∆∞·ªùi ch∆°i r·ªùi tr·∫≠n
                    game.playerLeft(currentPlayer);
                    System.out.println("‚ö†Ô∏è " + currentPlayer.getUsername() + " ƒë√£ r·ªùi game gi·ªØa ch·ª´ng");
                }
            }

            // H·ªßy ƒëƒÉng k√Ω k·∫øt n·ªëi
            connectionManager.unregisterClient(currentPlayer.getUsername());

            // X√≥a kh·ªèi danh s√°ch online
            mClient.userOffLine(currentPlayer);
            System.out.println("üëã " + currentPlayer.getUsername() + " ƒë√£ offline");
        }
    }

    private void OP(Message res, ObjectOutputStream obj) {
        try {
            obj.writeObject(res);
            obj.flush();
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i response cho client " + socket + ": " + e.getMessage());
        }
    }

    @Override
    public String toString() {
        return "ClientHandler{" + "socket=" + socket + '}';
    }
}
